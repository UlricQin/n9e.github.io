<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>夜莺手册 on N9E</title>
    <link>https://n9e.github.io/</link>
    <description>Recent content in 夜莺手册 on N9E</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language><atom:link href="https://n9e.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>安装部署</title>
      <link>https://n9e.github.io/quickstart/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://n9e.github.io/quickstart/</guid>
      <description>如果您对Docker的使用非常熟悉，建议利用Docker compose的方式快速启动测试，请参考使用Docker Compose快速部署，如果对Docker不熟悉，那就用二进制方式部署，也非常简单，最小的可运行环境是Prometheus+MySQL+Redis+Nightingale，请参考快速在生产环境部署启动单机版。这个最小的环境只有Prometheus采集到的自身的一些监控指标，略显单薄，此时，我们可以引入Telegraf，采集机器、网络设备、各类中间件的指标，请参考使用Telegraf采集监控数据。
如果您运行和维护着K8s集群，并且希望把Nightingale部署到K8s中，我们推荐您使用n9e-helm-chart来部署、升级、管理。
如果公司体量很大，建议把单机版本的Prometheus替换为VictoriaMetrics，请参考使用VictoriaMetrics作为时序库。或者直接部署多个Prometheus，按照业务线或者按照地域来划分集群，此时你可能需要接入多个Prom/VM/M3DB集群，在引入多个TSDB的过程中，就要同步使用夜莺的多Server部署模型了，请参考生产环境部署高可用集群版。</description>
    </item>
    <item>
      <title>功能介绍</title>
      <link>https://n9e.github.io/usage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://n9e.github.io/usage/</guid>
      <description>请参考如下视频教程：
 01-使用Docker Compose一行命令安装夜莺v5 02-快速在生产环境部署启动单机版夜莺v5 03-讲解夜莺v5人员组织相关功能 04-讲解夜莺v5监控看图相关功能 05-讲解夜莺v5告警规则的使用 06-讲解夜莺v5告警屏蔽规则的使用 07-讲解夜莺告警订阅规则的使用 08-讲解夜莺v5活跃告警和历史告警 09-讲解夜莺v5告警自愈脚本的使用 10-讲解夜莺监控对象的管理功能 11-夜莺v5如何接入多个时序存储 12-讲解夜莺v5配置文件  使用 Telegraf 采集监控数据，可以参考如下调研笔记：
 Telegraf监控客户端调研笔记（1）-介绍、安装、初步测试 Telegraf监控客户端调研笔记（2）-CPU、MEM、DISK、IO相关指标采集 Telegraf监控客户端调研笔记（3）-kernel、system、processes相关指标采集 Telegraf监控客户端调研笔记（4）-exec、net、netstat相关指标采集 Telegraf监控客户端调研笔记（5）-本地端口监控&amp;amp;远程TCP探测 Telegraf监控客户端调研笔记（6）-PING监控、进程监控  如果仍然有使用问题，可以联系我们，联系方式如下，公众号：</description>
    </item>
    <item>
      <title>API</title>
      <link>https://n9e.github.io/api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://n9e.github.io/api/</guid>
      <description></description>
    </item>
    <item>
      <title>使用Grafana-agent采集监控数据</title>
      <link>https://n9e.github.io/grafana-agent/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://n9e.github.io/grafana-agent/</guid>
      <description>Acknowledgement: Grafana Agent is a lightweight telemetry collector based on Prometheus that only performs its scraping and remote_write functions. Agent can also collect metrics, logs, and traces for storage in Grafana Cloud and Grafana Enterprise, as well as OSS deployments of Loki (logs), and Tempo (traces), Prometheus (metrics), and Cortex (metrics). Grafana Agent also contains several integrations (embedded metrics exporters) like node-exporter, a MySQL exporter, and many more.
 如果您使用和管理着Kubernetes集群以及您的应用运行在Kubernetes之上，请参考 在K8s中使用grafana-agent。</description>
    </item>
  </channel>
</rss>