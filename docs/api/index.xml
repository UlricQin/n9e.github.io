<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>API on N9E</title>
    <link>https://n9e.github.io/api/</link>
    <description>Recent content in API on N9E</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language><atom:link href="https://n9e.github.io/api/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>读取监控数据</title>
      <link>https://n9e.github.io/api/read/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://n9e.github.io/api/read/</guid>
      <description>首页有个架构图，大家可以看到，夜莺把接收到的监控数据都直接写入了后端时序数据库，所以，读取监控数据，无需经由夜莺的接口，直接读取后端的时序库的接口就可以了。即：如果使用了 Prometheus，就通过 Prometheus 的接口读取监控数据，如果用了 VictoriaMetrics，就通过 VictoriaMetrics 的接口读取监控数据。
比如 Prometheus，就是那些/api/v1/query /api/v1/query_range之类的接口。相关接口文档请参考：Prometheus官网</description>
    </item>
    <item>
      <title>推送监控数据（OpenTSDB协议）</title>
      <link>https://n9e.github.io/api/opentsdb/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://n9e.github.io/api/opentsdb/</guid>
      <description>调用 n9e-server 的 /opentsdb/put 接口，POST 方法，该接口实现了 OpenTSDB 的数据协议，监控数据做成 JSON 放到 HTTP Request Body 中，举例：
[ { &amp;#34;metric&amp;#34;: &amp;#34;cpu_usage_idle&amp;#34;, &amp;#34;timestamp&amp;#34;: 1637732157, &amp;#34;tags&amp;#34;: { &amp;#34;cpu&amp;#34;: &amp;#34;cpu-total&amp;#34;, &amp;#34;ident&amp;#34;: &amp;#34;c3-ceph01.bj&amp;#34; }, &amp;#34;value&amp;#34;: 30.5 }, { &amp;#34;metric&amp;#34;: &amp;#34;cpu_usage_util&amp;#34;, &amp;#34;timestamp&amp;#34;: 1637732157, &amp;#34;tags&amp;#34;: { &amp;#34;cpu&amp;#34;: &amp;#34;cpu-total&amp;#34;, &amp;#34;ident&amp;#34;: &amp;#34;c3-ceph01.bj&amp;#34; }, &amp;#34;value&amp;#34;: 69.5 } ] 显然，JSON 最外层是个数组，如果只上报一条监控数据，也可以不要外面的中括号，直接把对象结构上报：
{ &amp;#34;metric&amp;#34;: &amp;#34;cpu_usage_idle&amp;#34;, &amp;#34;timestamp&amp;#34;: 1637732157, &amp;#34;tags&amp;#34;: { &amp;#34;cpu&amp;#34;: &amp;#34;cpu-total&amp;#34;, &amp;#34;ident&amp;#34;: &amp;#34;c3-ceph01.bj&amp;#34; }, &amp;#34;value&amp;#34;: 30.5 } 服务端会看第一个字符是否是[，来判断上报的是数组，还是单个对象，自动做相应的 Decode。如果觉得上报的内容太过占用带宽，也可以做 gzip 压缩，此时上报的数据，要带有Content-Encoding: gzip的 Header。
Info注意 ident 这个标签，ident 是 identity 的缩写，表示设备的唯一标识，如果标签中有 ident 标签，n9e-server 就认为这个监控数据是来自某个机器的，会自动获取 ident 的 value，注册到监控对象的列表里</description>
    </item>
    <item>
      <title>推送监控数据（OpenFalcon协议）</title>
      <link>https://n9e.github.io/api/falcon/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://n9e.github.io/api/falcon/</guid>
      <description>调用 n9e-server 的 /openfalcon/push 接口，POST 方法，该接口实现了 Open-Falcon 的数据接收协议，监控数据做成 JSON 放到 HTTP Request Body 中，举例：
[ { &amp;#34;endpoint&amp;#34;: &amp;#34;c3-ceph01.bj&amp;#34;, &amp;#34;metric&amp;#34;: &amp;#34;cpu_usage_idle&amp;#34;, &amp;#34;timestamp&amp;#34;: 1637732157, &amp;#34;tags&amp;#34;: &amp;#34;cpu=cpu-total,region=ali&amp;#34;, &amp;#34;value&amp;#34;: 30.5 }, { &amp;#34;endpoint&amp;#34;: &amp;#34;c3-ceph01.bj&amp;#34;, &amp;#34;metric&amp;#34;: &amp;#34;cpu_usage_util&amp;#34;, &amp;#34;timestamp&amp;#34;: 1637732157, &amp;#34;tags&amp;#34;: &amp;#34;cpu=cpu-total,region=ali&amp;#34;, &amp;#34;value&amp;#34;: 69.5 } ] 显然，JSON 最外层是个数组，如果只上报一条监控数据，也可以不要外面的中括号，直接把对象结构上报：
{ &amp;#34;endpoint&amp;#34;: &amp;#34;c3-ceph01.bj&amp;#34;, &amp;#34;metric&amp;#34;: &amp;#34;cpu_usage_idle&amp;#34;, &amp;#34;timestamp&amp;#34;: 1637732157, &amp;#34;tags&amp;#34;: &amp;#34;cpu=cpu-total,region=ali&amp;#34;, &amp;#34;value&amp;#34;: 30.5 } 服务端会看第一个字符是否是[，来判断上报的是数组，还是单个对象，自动做相应的 Decode。如果觉得上报的内容太过占用带宽，也可以做 gzip 压缩，此时上报的数据，要带有Content-Encoding: gzip的 Header。
Info夜莺中有个监控对象（通常表示设备）的概念，n9e-server 会把 endpoint 字段当做监控对象看待，会自动获取 endpoint 的 value，注册到监控对象的列表里
 </description>
    </item>
    <item>
      <title>调用webapi的接口</title>
      <link>https://n9e.github.io/api/webapi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://n9e.github.io/api/webapi/</guid>
      <description>简介 n9e-webapi 模块提供了两类接口，一个是 /api/n9e 打头的，给前端调用，另一类是 /v1/n9e 打头的，给第三方系统调用。如果想以个人身份模仿WEB操作，也是调用 /api/n9e 相关接口。
以个人身份模仿WEB操作 这种方式，页面上 JavaScript 可以调用的所有接口，你都可以用程序调用，打开 chrome 的开发者工具，扒拉这些接口，还是非常容易的。当然，要先登录，登录调用 webapi 模块的 /api/n9e/auth/login 接口，系统使用 jwt 认证，如果登录成功，会返回 access_token 和 refresh_token，每次调用的时候都要把 access_token 放到 Header 里，access_token 差不多15分钟过期，之后可以重新调用登录接口换 token，也可以调用 /api/n9e/auth/refresh 接口用 refresh_token 换一个新的 access_token，当然，也会顺道返回一个新的 refresh_token，举例：
# 调用登录接口拿到access_token和refresh_token记录下来，后面调用其他接口的时候会用到 [root@10-255-0-34 ~]# curl -X POST &amp;#39;http://localhost:18000/api/n9e/auth/login&amp;#39; -d &amp;#39;{&amp;#34;username&amp;#34;: &amp;#34;root&amp;#34;, &amp;#34;password&amp;#34;: &amp;#34;root.2020&amp;#34;}&amp;#39; {&amp;#34;dat&amp;#34;:{&amp;#34;access_token&amp;#34;:&amp;#34;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhY2Nlc3NfdXVpZCI6ImIxNTcyMjgwLWZlNzAtNDhjZi1hNDQ3LWVlMjVhZmYwMjRhZCIsImF1dGhvcml6ZWQiOnRydWUsImV4cCI6MTYzNzgyMzA1OSwidXNlcl9pZGVudGl0eSI6IjEtcm9vdCJ9.nJ56Pc7qS5Ik_UaVmlNWu_QlABaBc4pZ_WkU45u2wWk&amp;#34;,&amp;#34;refresh_token&amp;#34;:&amp;#34;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2MzgzMzc4NTksInJlZnJlc2hfdXVpZCI6ImIxNTcyMjgwLWZlNzAtNDhjZi1hNDQ3LWVlMjVhZmYwMjRhZCsrMS1yb290IiwidXNlcl9pZGVudGl0eSI6IjEtcm9vdCJ9.JKsbfTYBCOOfR_oPsf496N9ml9yXbP7BHb4E8Yfnzbo&amp;#34;,&amp;#34;user&amp;#34;:{&amp;#34;id&amp;#34;:1,&amp;#34;username&amp;#34;:&amp;#34;root&amp;#34;,&amp;#34;nickname&amp;#34;:&amp;#34;超管&amp;#34;,&amp;#34;phone&amp;#34;:&amp;#34;&amp;#34;,&amp;#34;email&amp;#34;:&amp;#34;&amp;#34;,&amp;#34;portrait&amp;#34;:&amp;#34;&amp;#34;,&amp;#34;roles&amp;#34;:[&amp;#34;Admin&amp;#34;],&amp;#34;contacts&amp;#34;:{},&amp;#34;create_at&amp;#34;:1637545881,&amp;#34;create_by&amp;#34;:&amp;#34;system&amp;#34;,&amp;#34;update_at&amp;#34;:1637546351,&amp;#34;update_by&amp;#34;:&amp;#34;root&amp;#34;,&amp;#34;admin&amp;#34;:true}},&amp;#34;err&amp;#34;:&amp;#34;&amp;#34;} # access_token放到Authorization这个Header里，Bearer的验证方式 [root@10-255-0-34 ~]# curl -H &amp;#34;Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhY2Nlc3NfdXVpZCI6ImIxNTcyMjgwLWZlNzAtNDhjZi1hNDQ3LWVlMjVhZmYwMjRhZCIsImF1dGhvcml6ZWQiOnRydWUsImV4cCI6MTYzNzgyMzA1OSwidXNlcl9pZGVudGl0eSI6IjEtcm9vdCJ9.nJ56Pc7qS5Ik_UaVmlNWu_QlABaBc4pZ_WkU45u2wWk&amp;#34; &amp;#39;http://localhost:18000/api/n9e/self/profile&amp;#39; {&amp;#34;dat&amp;#34;:{&amp;#34;id&amp;#34;:1,&amp;#34;username&amp;#34;:&amp;#34;root&amp;#34;,&amp;#34;nickname&amp;#34;:&amp;#34;超管&amp;#34;,&amp;#34;phone&amp;#34;:&amp;#34;&amp;#34;,&amp;#34;email&amp;#34;:&amp;#34;&amp;#34;,&amp;#34;portrait&amp;#34;:&amp;#34;&amp;#34;,&amp;#34;roles&amp;#34;:[&amp;#34;Admin&amp;#34;],&amp;#34;contacts&amp;#34;:{},&amp;#34;create_at&amp;#34;:1637545881,&amp;#34;create_by&amp;#34;:&amp;#34;system&amp;#34;,&amp;#34;update_at&amp;#34;:1637546351,&amp;#34;update_by&amp;#34;:&amp;#34;root&amp;#34;,&amp;#34;admin&amp;#34;:true},&amp;#34;err&amp;#34;:&amp;#34;&amp;#34;} # 如果token过期了，后端会返回异常HTTP状态码，此时要调用refresh接口换取新的token [root@10-255-0-34 ~]# curl -X POST &amp;#39;http://localhost:18000/api/n9e/auth/refresh&amp;#39; -d &amp;#39;{&amp;#34;refresh_token&amp;#34;: &amp;#34;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.</description>
    </item>
  </channel>
</rss>